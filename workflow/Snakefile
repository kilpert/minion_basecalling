import glob
import os
import pandas as pd
import re


## 1st level of config variable definition: config.yaml ################################################################
try:
    configfile: "config/config.yaml"
except:
    pass


## 2nd level of config variable definition: snakemake command line args (overwrites previous definitions) ##############


## 3rd level of config variable definition: Snakefile (overwrites previous definitions) ################################

## outdir
try:
    results = config["outdir"]
except:
    config["outdir"] = "results"
    results = config["outdir"]


try:
    config["guppy_basecaller"]
except:
    config["guppy_basecaller"] = "guppy_basecaller"


try:
    m = re.search("(.+).cfg", config["run"]["cfg"])
    config["guppy_basecaller"]["cfg_type"]  = m.group(1)
except:
    config["guppy_basecaller"]["cfg_type"] = "flowcell+kit"
cfg_type = config["guppy_basecaller"]["cfg_type"]


try:
    config["run"]["name"] = os.path.basename(config["input_dir"])
    run = config["run"]["name"]
except:
    pass


## config ##############################################################################################################

print("{:#^60}".format(" Config "))
print(json.dumps(config, sort_keys=True, indent=4))


## sample_sheet ########################################################################################################

print("{:#^60}".format(" sample_sheet (selected columns) "))

df = pd.read_csv(config["run"]["sample_sheet"])
##print(df)

## dataframe for samples in samplesheet
dfs = df[["barcode", "alias"]]
print(dfs)


def get_dfl(df, barcodes):
    """extend df by barcodes"""
    dfb = pd.DataFrame({"barcode": barcodes, "alias": barcodes })
    return pd.concat([df, dfb.loc[~dfb["barcode"].isin(df["barcode"].values)]])


def get_alias(df, barcode):
    return df[df["barcode"]==barcode]["alias"].values[0]


def get_barcode(df, alias):
        return df[df["alias"]==alias]["barcode"].values[0]


## snakemake: all ######################################################################################################

print("{:#^60}".format(" Workflow "))


## def guppy_basecaller_fastq_output(wildcards):
##     checkpoint_output = checkpoints.guppy_basecaller.get(results=results, run=run, cfg_type=cfg_type).output[0]
##     w = glob_wildcards(checkpoint_output+"/{pass_or_fail}/{barcode}/{bname}.fastq.gz")
##     return expand("{results}/{run}/{cfg_type}/guppy_basecaller_fastq/{pass_or_fail}/{barcode}.fastq.gz",
##         results=results,
##         run=run,
##         cfg_type=cfg_type,
##         pass_or_fail=sorted(list(set(w.pass_or_fail))),
##         barcode=sorted(list(set(w.barcode))),
##     )


## alias

def guppy_basecaller_fastq_alias_output(wildcards):
    checkpoint_output = checkpoints.guppy_basecaller.get(results=results, run=run, cfg_type=cfg_type).output[0]
    w = glob_wildcards(checkpoint_output+"/{pass_or_fail}/{barcode}/{bname}.fastq.gz")
    barcodes = sorted(list(set(w.barcode)))
    dfl = get_dfl(dfs, barcodes)
    alias = [get_alias(dfl, b) for b in barcodes if b in dfl["barcode"].values]
    ## print("alias:", alias, len(alias))
    return expand("{results}/{run}/{cfg_type}/guppy_basecaller_fastq_alias/{pass_or_fail}/{alias}.fastq.gz",
        results=results,
        run=run,
        cfg_type=cfg_type,
        pass_or_fail=sorted(list(set(w.pass_or_fail))),
        alias=alias
    )


def fastq_alias_stats_output(wildcards):
    return expand("{results}/{run}/{cfg_type}/guppy_basecaller_fastq_alias/fastq_stats.tsv",
        results=results,
        run=run,
        cfg_type=cfg_type,
    )


def fastq_output(wildcards):
    checkpoint_output = checkpoints.guppy_basecaller.get(results=results, run=run, cfg_type=cfg_type).output[0]
    w = glob_wildcards(checkpoint_output+"/{pass_or_fail}/{barcode}/{bname}.fastq.gz")
    barcodes = sorted(list(set(w.barcode)))
    alias = [get_alias(dfs, b) for b in barcodes if b in dfs["barcode"].values]
    ## print("alias:", alias, len(alias))
    return expand("{results}/{run}/{cfg_type}/fastq/{pass_or_fail}/{alias}.fastq.gz",
        results=results,
        run=run,
        cfg_type=cfg_type,
        pass_or_fail=sorted(list(set(w.pass_or_fail))),
        alias=alias
    )

def fastq_fastqc_output(wildcards):
    checkpoint_output = checkpoints.guppy_basecaller.get(results=results, run=run, cfg_type=cfg_type).output[0]
    w = glob_wildcards(checkpoint_output+"/{pass_or_fail}/{barcode}/{bname}.fastq.gz")
    barcodes = sorted(list(set(w.barcode)))
    alias = [get_alias(dfs, b) for b in barcodes if b in dfs["barcode"].values]
    ## print("alias:", alias, len(alias))
    return expand("{results}/{run}/{cfg_type}/fastq/{pass_or_fail}/fastqc/{alias}{ext}",
        results=results,
        run=run,
        cfg_type=cfg_type,
        pass_or_fail=sorted(list(set(w.pass_or_fail))),
        alias=alias,
        ext=[".html", "_fastqc.zip"]
    )


def fastq_multiqc_output(wildcards):
    checkpoint_output = checkpoints.guppy_basecaller.get(results=results, run=run, cfg_type=cfg_type).output[0]
    w = glob_wildcards(checkpoint_output+"/{pass_or_fail}/{barcode}/{bname}.fastq.gz")
    barcodes = sorted(list(set(w.barcode)))
    alias = [get_alias(dfs, b) for b in barcodes if b in dfs["barcode"].values]
    ## print("alias:", alias, len(alias))
    return expand("{results}/{run}/{cfg_type}/fastq/{pass_or_fail}/multiqc/{run}.{pass_or_fail}.multiqc.html",
        results=results,
        run=run,
        cfg_type=cfg_type,
        pass_or_fail=sorted(list(set(w.pass_or_fail))),
    )


## rule all ############################################################################################################

rule all:
    input:
        expand("{results}/{run}/{cfg_type}/guppy_basecaller.available_workflows.txt", results=results, run=run, cfg_type=cfg_type), # optional
        ## guppy_basecaller_fastq_output,
        guppy_basecaller_fastq_alias_output,
        ## fastqc_alias_output, # crashes at fail/unclassified by out of memory

        expand("{results}/{run}/{cfg_type}/guppy_basecaller_fastq_alias/{run}.flowcell.fastq_stats.tsv",
            results=results,
            run=run,
            cfg_type=cfg_type,
        ),

        fastq_output,
        fastq_fastqc_output,
        fastq_multiqc_output,

        expand("{results}/{run}/{cfg_type}/fastq/{run}.fastq_stats.tsv",
            results=results,
            run=run,
            cfg_type=cfg_type,
        ),



## rules ###############################################################################################################

rule guppy_basecaller_available_workflows:
    output:
        "{results}/{run}/{cfg_type}/guppy_basecaller.available_workflows.txt"
    params:
        bin=config["guppy_basecaller"]["bin"],
    shell:
        "{params.bin} "
        "--print_workflows "
        ">{output} "


if config["guppy_basecaller"]["cfg_type"] == "flowcell+kit":
    ## flowcell+kit
    checkpoint guppy_basecaller:
        output:
            ##"{results}/{run}/{cfg_type}/guppy_basecaller/sequencing_summary.txt"
            directory("{results}/{run}/{cfg_type}/guppy_basecaller")
        params:
            bin=config["guppy_basecaller"]["bin"],
            parameter=config["guppy_basecaller"]["parameter"],
            input_dir=config["input_dir"],
            output_dir="{results}/{run}/{cfg_type}/guppy_basecaller",
            flowcell=config["run"]["flowcell"],
            kit=config["run"]["library_prep_kit"],
            ## sample_sheet=config["run"]["sample_sheet"],
        log:
            "{results}/{run}/{cfg_type}/guppy_basecaller/{run}.{cfg_type}.guppy_basecaller.log"
        benchmark:
            "{results}/{run}/.benchmark/{run}.{cfg_type}.guppy_basecaller.benchmark.txt"
        shell:
            "{params.bin} "
            "{params.parameter} "
            "--flowcell {params.flowcell} "
            "--kit {params.kit} "
            ## "--sample_sheet {params.sample_sheet} "
            "--input_path {params.input_dir} "
            "--save_path {params.output_dir} "
            ">{log} 2>&1 "
else:
    ## cfg
    checkpoint guppy_basecaller:
        output:
            ##"{results}/{run}/{cfg_type}/guppy_basecaller/sequencing_summary.txt"
            directory("{results}/{run}/{cfg_type}/guppy_basecaller")
        params:
            bin=config["guppy_basecaller"]["bin"],
            parameter=config["guppy_basecaller"]["parameter"],
            input_dir=config["input_dir"],
            output_dir="{results}/{run}/{cfg_type}/guppy_basecaller",
            cfg=config["run"]["cfg"], # <--------------------------------------------------------------- use cfg file!!!
            barcode_kit=config["run"]["barcode_kit"],
            ## sample_sheet=config["run"]["sample_sheet"],
        log:
            "{results}/{run}/{cfg_type}/guppy_basecaller/{run}.{cfg_type}.guppy_basecaller.log"
        benchmark:
            "{results}/{run}/.benchmark/{run}.{cfg_type}.guppy_basecaller.benchmark.txt"
        shell:
            "{params.bin} "
            "{params.parameter} "
            "--config {params.cfg} " # <---------------------------------------------------------------- use cfg file!!!
            ## "--sample_sheet {params.sample_sheet} "
            "--input_path {params.input_dir} "
            "--save_path {params.output_dir} "
            "--barcode_kits {params.barcode_kit} "
            ">{log} 2>&1 "


def guppy_basecaller_fastq_input(wildcards):
    checkpoint_output = str(checkpoints.guppy_basecaller.get(**wildcards).output[0])
    paths = []

    for f in glob.glob(checkpoint_output+"/**/*.fastq.gz", recursive=True):

        m = re.search("/(unclassified|barcode\d+)/", f)
        if m:
            barcode = m.group(1)
        else:
            barcode = None

        m = re.search("/(pass|fail)/", f)
        if m:
            pass_or_fail = m.group(1)
        else:
            pass_or_fail = None

        if barcode==wildcards.barcode and pass_or_fail==wildcards.pass_or_fail:
            paths.append(f)

    paths = sorted(paths)

    if not paths:
        print(wildcards.barcode)

    return paths


## concat all fastq files for each barcode
rule guppy_basecaller_fastq:
    input:
        guppy_basecaller_fastq_input
    output:
        temp("{results}/{run}/{cfg_type}/guppy_basecaller_fastq/{pass_or_fail}/{barcode}.fastq.gz")
    threads:
        2
    shell:
        "zcat {input} "
        "| pigz -p {threads} --best "
        ">{output} "


## alias ###############################################################################################################

def guppy_basecaller_fastq_alias_input(wildcards):
    ##print( [wildcards.items] )
    checkpoint_output = checkpoints.guppy_basecaller.get(results=results, run=run, cfg_type=cfg_type).output[0]
    w = glob_wildcards(checkpoint_output+"/{pass_or_fail}/{barcode}/{bname}.fastq.gz")
    barcodes = sorted(list(set(w.barcode)))
    dfl = get_dfl(dfs, barcodes)
    return expand("{results}/{run}/{cfg_type}/guppy_basecaller_fastq/{pass_or_fail}/{barcode}.fastq.gz",
        results=results,
        run=run,
        cfg_type=cfg_type,
        pass_or_fail=wildcards.pass_or_fail,
        barcode=get_barcode(dfl, wildcards.alias)
    )


rule guppy_basecaller_fastq_alias:
    input:
        guppy_basecaller_fastq_alias_input
    output:
        "{results}/{run}/{cfg_type}/guppy_basecaller_fastq_alias/{pass_or_fail}/{alias}.fastq.gz",
    shell:
        "cp {input} {output} "


def fastq_flowcell_stats_input(wildcards):
    checkpoint_output = checkpoints.guppy_basecaller.get(results=results, run=run, cfg_type=cfg_type).output[0]
    w = glob_wildcards(checkpoint_output+"/{pass_or_fail}/{barcode}/{bname}.fastq.gz")
    barcodes = sorted(list(set(w.barcode)))
    dfl = get_dfl(dfs, barcodes)
    alias = [get_alias(dfl, b) for b in barcodes if b in dfl["barcode"].values]
    ## print("alias:", alias, len(alias))
    return expand("{results}/{run}/{cfg_type}/guppy_basecaller_fastq_alias/{pass_or_fail}/{alias}.fastq.gz",
        results=results,
        run=run,
        cfg_type=cfg_type,
        pass_or_fail=sorted(list(set(w.pass_or_fail))),
        alias=alias
    )


rule fastq_flowcell_stats:
    input:
        fastq_flowcell_stats_input
    output:
        "{results}/{run}/{cfg_type}/guppy_basecaller_fastq_alias/{run}.flowcell.fastq_stats.tsv"
    shell:
        "( "
        """echo -e "sample\tqc\treads\tbases"; """
        "for f in {input}; do "
        "sample=$(basename ${{f%.fastq.gz}}); "
        "qc=$(basename $(dirname ${{f%.fastq.gz}})); "
        "reads=$(zcat $f | sed -n '1~4p' | wc -l); "
        """bases=$(zcat $f | sed -n '2~4p' | awk 'BEGIN{{FS=""}}{{for(i=1;i<=NF;i++)c++}}END{{print c}}'); """
        """echo -e "$sample\t$qc\t$reads\t$bases"; """
        "done"
        ") "
        ">{output}; "


rule fastq:
    input:
        "{results}/{run}/{cfg_type}/guppy_basecaller_fastq_alias/{pass_or_fail}/{alias}.fastq.gz"
    output:
        "{results}/{run}/{cfg_type}/fastq/{pass_or_fail}/{alias}.fastq.gz"
    params:
        in_path="../../guppy_basecaller_fastq_alias/{pass_or_fail}/{alias}.fastq.gz"
    shell:
        ##"cp {input} {output} "
        "ln -s {params.in_path} {output} "


rule fastq_fastqc:
    input:
        "{results}/{run}/{cfg_type}/fastq/{pass_or_fail}/{alias}.fastq.gz"
    output:
        html="{results}/{run}/{cfg_type}/fastq/{pass_or_fail}/fastqc/{alias}.html",
        zip="{results}/{run}/{cfg_type}/fastq/{pass_or_fail}/fastqc/{alias}_fastqc.zip" # the suffix _fastqc.zip is necessary for multiqc to find the file. If not using multiqc, you are free to choose an arbitrary filename
    params:
        "--quiet"
    threads:
        2
    wrapper:
        "v1.3.2/bio/fastqc"


def multiqc_input(wildcards):
    checkpoint_output = checkpoints.guppy_basecaller.get(results=results, run=run, cfg_type=cfg_type).output[0]
    w = glob_wildcards(checkpoint_output+"/{pass_or_fail}/{barcode}/{bname}.fastq.gz")
    barcodes = sorted(list(set(w.barcode)))
    alias = [get_alias(dfs, b) for b in barcodes if b in dfs["barcode"].values]
    ## print("alias:", alias, len(alias))
    return expand("{{results}}/{{run}}/{{cfg_type}}/fastq/{pass_or_fail}/fastqc/{alias}_fastqc.zip",
        pass_or_fail=wildcards.pass_or_fail,
        alias=alias,
    )


rule multiqc:
    input:
        multiqc_input
    output:
        "{results}/{run}/{cfg_type}/fastq/{pass_or_fail}/multiqc/{run}.{pass_or_fail}.multiqc.html"
    params:
        ""  # Optional: extra parameters for multiqc.
    log:
        "{results}/{run}/{cfg_type}/fastq/{pass_or_fail}/multiqc/{run}.{pass_or_fail}.multiqc.log"
    wrapper:
        "v1.3.2/bio/multiqc"


def fastq_stats_input(wildcards):
    checkpoint_output = checkpoints.guppy_basecaller.get(results=results, run=run, cfg_type=cfg_type).output[0]
    w = glob_wildcards(checkpoint_output+"/{pass_or_fail}/{barcode}/{bname}.fastq.gz")
    barcodes = sorted(list(set(w.barcode)))
    alias = [get_alias(dfs, b) for b in barcodes if b in dfs["barcode"].values]
    return expand("{{results}}/{{run}}/{{cfg_type}}/fastq/{pass_or_fail}/{alias}.fastq.gz",
        pass_or_fail=sorted(list(set(w.pass_or_fail))),
        alias=alias,
    )


rule fastq_stats_input:
    input:
        fastq_stats_input
    output:
        "{results}/{run}/{cfg_type}/fastq/{run}.fastq_stats.tsv"
    shell:
        "( "
        """echo -e "sample\tqc\treads\tbases"; """
        "for f in {input}; do "
        "sample=$(basename ${{f%.fastq.gz}}); "
        "qc=$(basename $(dirname ${{f%.fastq.gz}})); "
        "reads=$(zcat $f | sed -n '1~4p' | wc -l); "
        """bases=$(zcat $f | sed -n '2~4p' | awk 'BEGIN{{FS=""}}{{for(i=1;i<=NF;i++)c++}}END{{print c}}'); """
        """echo -e "$sample\t$qc\t$reads\t$bases"; """
        "done"
        ") "
        ">{output}; "

